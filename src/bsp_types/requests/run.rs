use std::path::PathBuf;
use serde::{Deserialize, Serialize};
use serde_json::Value;
use std::process::Command;

use crate::bsp_types::requests::{CreateCommand, Request};
use crate::bsp_types::BuildTargetIdentifier;

#[derive(Debug)]
pub enum Run {}

impl Request for Run {
    type Params = RunParams;
    type Result = RunResult;
    const METHOD: &'static str = "buildTarget/run";
}

impl CreateCommand for RunParams {
    fn origin_id(&self) -> Option<String> {
        self.origin_id.clone()
    }

    fn create_command(&self, root: PathBuf) -> Command {
        let mut com = Command::new(toolchain::cargo());
        com.current_dir(root);
        com.args(&["run", "--message-format=json"]);
        com.arg("--target");
        com.arg(self.target.clone().uri);
        if let Some(arguments) = &self.arguments {
            com.args(arguments);
        }
        com
    }
}

#[derive(Debug, Serialize, Deserialize, Default)]
#[serde(rename_all = "camelCase")]
pub struct RunParams {
    /** The build target to run. */
    pub target: BuildTargetIdentifier,

    /** A unique identifier generated by the client to identify this request.
     * The server may include this id in triggered notifications or responses. */
    #[serde(skip_serializing_if = "Option::is_none")]
    pub origin_id: Option<String>,

    /** Optional arguments to the executed application. */
    #[serde(skip_serializing_if = "Option::is_none")]
    pub arguments: Option<Vec<String>>,

    /** Kind of data to expect in the data field. If this field is not set, the kind of data is not specified. */
    #[serde(skip_serializing_if = "Option::is_none")]
    pub data_kind: Option<String>,

    /** Language-specific metadata for this execution.
     * See ScalaMainClass as an example. */
    #[serde(skip_serializing_if = "Option::is_none")]
    pub data: Option<Value>,
}

#[derive(Debug, Serialize, Deserialize, Default)]
#[serde(rename_all = "camelCase")]
pub struct RunResult {
    /** An optional request id to know the origin of this report. */
    #[serde(skip_serializing_if = "Option::is_none")]
    pub origin_id: Option<String>,

    /** A status code for the execution. */
    pub status_code: i32,
}
