use crate::bsp_types::{BuildTargetIdentifier, MethodName, Uri};
use serde::{Deserialize, Serialize};

#[derive(Debug, Serialize, Deserialize, Default)]
#[serde(rename_all = "camelCase")]
pub struct SourcesParams {
    pub targets: Vec<BuildTargetIdentifier>,
}

impl MethodName for SourcesParams {
    fn get_method_name() -> &'static str {
        "buildTarget/sources"
    }
}

#[derive(Debug, Serialize, Deserialize, Default)]
#[serde(rename_all = "camelCase")]
pub struct SourcesResult {
    pub items: Vec<SourcesItem>,
}

#[derive(Debug, Serialize, Deserialize, Default)]
#[serde(rename_all = "camelCase")]
pub struct SourcesItem {
    pub target: BuildTargetIdentifier,

    /** The text documents or and directories that belong to this build target. */
    sources: Vec<SourceItem>,

    /** The root directories from where source files should be relativized.
     * Example: ["file://Users/name/dev/metals/src/main/scala"] */
    #[serde(skip_serializing_if = "Option::is_none")]
    roots: Option<Vec<Uri>>,
}

#[derive(Debug, Serialize, Deserialize, Default)]
#[serde(rename_all = "camelCase")]
pub struct SourceItem {
    /** Either a text document or a directory. A directory entry must end with a forward
     * slash "/" and a directory entry implies that every nested text document within the
     * directory belongs to this source item. */
    pub uri: Uri,

    /** Type of file of the source item, such as whether it is file or directory. */
    pub kind: SourceItemKind,

    /** Indicates if this source is automatically generated by the build and is not
     * intended to be manually edited by the user. */
    pub generated: bool,
}

#[derive(Debug, Serialize, Deserialize, Default)]
#[serde(rename_all = "camelCase")]
pub enum SourceItemKind {
    /** The source item references a normal file.  */
    #[default]
    File = 1,
    /** The source item references a directory. */
    Directory = 2,
}
