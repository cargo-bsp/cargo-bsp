use serde::{Deserialize, Serialize};

use crate::*;

#[derive(Clone, Debug, Default, Eq, PartialEq, Serialize, Deserialize)]
#[serde(rename_all = "camelCase")]
pub struct TaskFinishParams {
    /// Unique id of the task with optional reference to parent task id
    pub task_id: TaskId,
    /// A unique identifier generated by the client to identify this request.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub origin_id: Option<Identifier>,
    /// Timestamp of when the event started in milliseconds since Epoch.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub event_time: Option<i64>,
    /// Message describing the task.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub message: Option<String>,
    /// Task completion status.
    pub status: StatusCode,
    /// Optional metadata about the task.
    /// Objects for specific tasks like compile, test, etc are specified in the protocol.
    #[serde(flatten, skip_serializing_if = "Option::is_none")]
    pub data: Option<TaskFinishData>,
}

#[cfg(test)]
mod tests {
    use super::*;
    use insta::assert_json_snapshot;

    #[test]
    fn task_finish_params() {
        let test_data = TaskFinishParams {
            task_id: TaskId::default(),
            origin_id: Some(Identifier::default()),
            event_time: Some(1),
            message: Some("test_message".to_string()),
            status: StatusCode::default(),
            data: Some(TaskFinishData::compile_report(CompileReport::default())),
        };

        assert_json_snapshot!(test_data,
            @r#"
        {
          "taskId": {
            "id": ""
          },
          "originId": "",
          "eventTime": 1,
          "message": "test_message",
          "status": 1,
          "dataKind": "compile-report",
          "data": {
            "target": {
              "uri": ""
            },
            "errors": 0,
            "warnings": 0
          }
        }
        "#
        );
        assert_json_snapshot!(TaskFinishParams::default(),
            @r#"
        {
          "taskId": {
            "id": ""
          },
          "status": 1
        }
        "#
        );
    }
}
