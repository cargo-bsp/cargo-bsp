use serde::{Deserialize, Serialize};

use crate::requests::Request;
use crate::{BuildTargetIdentifier, Identifier, OtherData, StatusCode};

/// The run request is sent from the client to the server to run a build target. The
/// server communicates during the initialize handshake whether this method is
/// supported or not.
///
/// This request may trigger a compilation on the selected build targets. The server
/// is free to send any number of `build/task*`, `build/publishDiagnostics` and
/// `build/logMessage` notifications during compilation before completing the
/// response.
///
/// The client will get a `originId` field in `RunResult` if the `originId` field in
/// the `RunParams` is defined.
///
/// Note that an empty run request is valid. Run will be executed in the target as
/// specified in the build tool.
#[derive(Debug)]
pub enum BuildTargetRun {}

impl Request for BuildTargetRun {
    type Params = RunParams;
    type Result = RunResult;
    const METHOD: &'static str = "buildTarget/run";
}

#[derive(Clone, Debug, Default, Eq, PartialEq, Serialize, Deserialize)]
#[serde(rename_all = "camelCase")]
pub struct RunParams {
    /// The build target to run.
    pub target: BuildTargetIdentifier,
    /// A unique identifier generated by the client to identify this request.
    /// The server may include this id in triggered notifications or responses.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub origin_id: Option<Identifier>,
    /// Optional arguments to the executed application.
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub arguments: Vec<String>,
    /// Language-specific metadata for this execution.
    /// See ScalaMainClass as an example.
    #[serde(flatten, default, skip_serializing_if = "Option::is_none")]
    pub data: Option<RunParamsData>,
}

#[allow(clippy::large_enum_variant)]
#[derive(Clone, Debug, Eq, PartialEq, Serialize, Deserialize)]
#[serde(rename_all = "kebab-case", tag = "dataKind", content = "data")]
pub enum NamedRunParamsData {}

#[derive(Clone, Debug, Eq, PartialEq, Serialize, Deserialize)]
#[serde(untagged)]
pub enum RunParamsData {
    Named(NamedRunParamsData),
    Other(OtherData),
}

impl RunParamsData {}

#[derive(Clone, Debug, Default, Eq, PartialEq, Hash, Ord, PartialOrd, Serialize, Deserialize)]
#[serde(rename_all = "camelCase")]
pub struct RunResult {
    /// An optional request id to know the origin of this report.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub origin_id: Option<Identifier>,
    /// A status code for the execution.
    pub status_code: StatusCode,
}

#[cfg(test)]
mod tests {
    use insta::assert_json_snapshot;

    use crate::tests::test_deserialization;

    use super::*;

    #[test]
    fn run_method() {
        assert_eq!(BuildTargetRun::METHOD, "buildTarget/run");
    }

    #[test]
    fn run_params() {
        let test_data = RunParams {
            target: BuildTargetIdentifier::default(),
            origin_id: Some("test_originId".into()),
            arguments: vec!["test_argument".to_string()],
            data: Some(RunParamsData::Other(OtherData {
                data_kind: "test_dataKind".to_string(),
                data: serde_json::json!({"dataKey": "dataValue"}),
            })),
        };

        test_deserialization(
            r#"{"target":{"uri":""},"originId":"test_originId","arguments":["test_argument"],"dataKind":"test_dataKind","data":{"dataKey":"dataValue"}}"#,
            &test_data,
        );

        test_deserialization(r#"{"target":{"uri":""}}"#, &RunParams::default());
    }

    #[test]
    fn run_result() {
        let test_data = RunResult {
            origin_id: Some("test_originId".into()),
            status_code: StatusCode::default(),
        };

        assert_json_snapshot!(test_data,
            @r#"
        {
          "originId": "test_originId",
          "statusCode": 1
        }
        "#
        );
        assert_json_snapshot!(RunResult::default(),
            @r#"
        {
          "statusCode": 1
        }
        "#
        );
    }
}
