use serde::{Deserialize, Serialize};
use serde_repr::{Deserialize_repr, Serialize_repr};

use crate::requests::Request;
use crate::{BuildTargetIdentifier, URI};

#[derive(Debug)]
pub enum BuildTargetSources {}

/// The build target sources request is sent from the client to the server to query
/// for the list of text documents and directories that are belong to a build
/// target. The sources response must not include sources that are external to the
/// workspace, see `buildTarget/dependencySources`.
impl Request for BuildTargetSources {
    type Params = SourcesParams;
    type Result = SourcesResult;
    const METHOD: &'static str = "buildTarget/sources";
}

#[derive(Clone, Debug, Default, Eq, PartialEq, Hash, Ord, PartialOrd, Serialize, Deserialize)]
#[serde(rename_all = "camelCase")]
pub struct SourcesParams {
    pub targets: Vec<BuildTargetIdentifier>,
}

#[derive(Clone, Debug, Default, Eq, PartialEq, Hash, Ord, PartialOrd, Serialize, Deserialize)]
#[serde(rename_all = "camelCase")]
pub struct SourcesResult {
    pub items: Vec<SourcesItem>,
}

#[derive(Clone, Debug, Default, Eq, PartialEq, Hash, Ord, PartialOrd, Serialize, Deserialize)]
#[serde(rename_all = "camelCase")]
pub struct SourcesItem {
    pub target: BuildTargetIdentifier,
    /// The text documents or and directories that belong to this build target.
    pub sources: Vec<SourceItem>,
    /// The root directories from where source files should be relativized.
    /// Example: ["file://Users/name/dev/metals/src/main/scala"]
    #[serde(default, skip_serializing_if = "Vec::is_empty")]
    pub roots: Vec<URI>,
}

#[derive(Clone, Debug, Default, Eq, PartialEq, Hash, Ord, PartialOrd, Serialize, Deserialize)]
#[serde(rename_all = "camelCase")]
pub struct SourceItem {
    /// Either a text document or a directory. A directory entry must end with a forward
    /// slash "/" and a directory entry implies that every nested text document within the
    /// directory belongs to this source item.
    pub uri: URI,
    /// Type of file of the source item, such as whether it is file or directory.
    pub kind: SourceItemKind,
    /// Indicates if this source is automatically generated by the build and is not
    /// intended to be manually edited by the user.
    pub generated: bool,
}

#[derive(
    Clone, Debug, Default, Eq, PartialEq, Hash, Ord, PartialOrd, Serialize_repr, Deserialize_repr,
)]
#[repr(u8)]
pub enum SourceItemKind {
    #[default]
    /// The source item references a normal file.
    File = 1,
    /// The source item references a directory.
    Directory = 2,
}

#[cfg(test)]
mod tests {
    use insta::assert_json_snapshot;

    use crate::tests::test_deserialization;

    use super::*;

    #[test]
    fn sources_method() {
        assert_eq!(BuildTargetSources::METHOD, "buildTarget/sources");
    }

    #[test]
    fn sources_params() {
        test_deserialization(
            r#"{"targets":[{"uri":""}]}"#,
            &SourcesParams {
                targets: vec![BuildTargetIdentifier::default()],
            },
        );
        test_deserialization(r#"{"targets":[]}"#, &SourcesParams::default());
    }

    #[test]
    fn sources_result() {
        let test_data = SourcesResult {
            items: vec![SourcesItem::default()],
        };

        assert_json_snapshot!(test_data,
            @r#"
        {
          "items": [
            {
              "target": {
                "uri": ""
              },
              "sources": []
            }
          ]
        }
        "#
        );
        assert_json_snapshot!(SourcesResult::default(),
            @r#"
        {
          "items": []
        }
        "#
        );
    }

    #[test]
    fn sources_item() {
        let test_data = SourcesItem {
            target: BuildTargetIdentifier::default(),
            sources: vec![SourceItem::default()],
            roots: vec![URI::default()],
        };

        assert_json_snapshot!(test_data,
            @r#"
        {
          "target": {
            "uri": ""
          },
          "sources": [
            {
              "uri": "",
              "kind": 1,
              "generated": false
            }
          ],
          "roots": [
            ""
          ]
        }
        "#
        );
        assert_json_snapshot!(SourcesItem::default(),
            @r#"
        {
          "target": {
            "uri": ""
          },
          "sources": []
        }
        "#
        );
    }

    #[test]
    fn source_item() {
        let test_data = SourceItem {
            uri: "test_uri".into(),
            kind: SourceItemKind::File,
            generated: true,
        };

        assert_json_snapshot!(test_data,
            @r#"
        {
          "uri": "test_uri",
          "kind": 1,
          "generated": true
        }
        "#
        );
        assert_json_snapshot!(SourceItem::default(),
            @r#"
        {
          "uri": "",
          "kind": 1,
          "generated": false
        }
        "#
        );
    }

    #[test]
    fn source_item_kind() {
        assert_json_snapshot!(SourceItemKind::File, @"1");
        assert_json_snapshot!(SourceItemKind::Directory, @"2");
    }
}
